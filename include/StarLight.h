/**
 * @file StarLight.h
 * @author MacaroniDamage
 * @brief This effect should imitate a night sky
 * @version 0.2
 * @date 2020-12-23
 * 
 * 
 */
#ifndef _STARLIGHT_
#define _STARLIGHT_



#include <Arduino.h>
#include "Timer.h"
#include "LedController.h"
#include "TransitionHandler.h"

/**
 * @brief Saves how many stars will be displayed
 * 
 */
#define AMOUNT_OF_STARS 20

/**
 * @brief Defines the directions
 *        with constances.
 * 
 */
enum MoveDirection{
        LEFT_TO_RIGHT,
        RIGHT_TO_LEFT,
};

class StarLight
{
private:
    
    /**
     * @brief Defines when the stars will be regenerated
     * 
     */
    const uint32_t REGENERATE_STARS = 50000;

    /**
     * @brief Defines when a new falling star will be casted
     * 
     */
    const uint32_t CAST_NEXT_FALLING_STAR = 180000;


     
    /**
     * @brief Specifies in which direction the falling star will be casted
     *        This value will be generated randomly every time a falling star
     *        will be casted.
     * 
     */
    MoveDirection directionFrame = LEFT_TO_RIGHT;

    /**
     * @brief Saves the position of the falling star
     * 
     */
    int framePosition = 50;

    /**
     * @brief Contains the adress of the first cell that will be generated by
     *        the chooseFallingStar() method. The CAST_FALLING_STAR state uses this
     *        variable to display the choosen star.
     * 
     */
    uint32_t* choosenType;

    /**
     * @brief Displays a falling star that is white at the front und blue at the end.
     * 
     */
    uint32_t blueFallingStar [8] = {_pController->Color(255,255,255), _pController->Color(51, 204, 255), _pController->Color(0, 102, 255), _pController->Color(0, 51, 204), _pController->Color(0, 0, 153), 0,0,0};
     uint32_t blueFallingStarM [8] = {0,0,0, _pController->Color(0, 0, 153), _pController->Color(0, 51, 204),_pController->Color(0, 102, 255),_pController->Color(51, 204, 255),_pController->Color(255,255,255)};

    /**
     * @brief Displays a falling star that is yellow at the front at red at the end
     * 
     */
    uint32_t orangeFallingStar [8] = {_pController->Color(255,255,0), _pController->Color(255,232,0),_pController->Color(255,162,0),_pController->Color(255,139,0),_pController->Color(255,116,0),_pController->Color(255,93,0),_pController->Color(255,0,0),_pController->Color(128,0,0)};
    uint32_t orangeFallingStarM [8] = {_pController->Color(128,0,0),_pController->Color(255,0,0),_pController->Color(255,93,0),_pController->Color(255,116,0),_pController->Color(255,139,0),_pController->Color(255,162,0), _pController->Color(255,232,0),_pController->Color(255,255,0)};

    /**
     * @brief Displays a falling star with rainbow colors
     * 
     */
    uint32_t rainbowFallingStar [8] = {_pController->Color(255, 0, 0), _pController->Color(255, 165, 0), _pController->Color(255, 255, 0), _pController->Color(0, 128, 0), _pController->Color(0, 0, 255), _pController->Color(75, 0, 130), _pController->Color(238, 130, 238),0};

    /**
     * @brief Displays a falling star with eight white nouances
     * 
     */
    uint32_t whiteFallingStar [8] = {_pController->Color(255,255,255), _pController->Color(198,198,198), _pController->Color(170,170,170), _pController->Color(142,142,142), _pController->Color(113,113,113), _pController->Color(85,85,85), _pController->Color(57,57,57), _pController->Color(28,28,28)};

    /**
     * @brief Displays a falling star with eight white nouances but for rgba stripes
     * 
     */
    uint32_t whiteFallingStarRGBW [8] = {_pController->Color(0,0,0, 255), _pController->Color(0,0,0,198), _pController->Color(0,0,0,170), _pController->Color(0,0,0,142), _pController->Color(0,0,0,113), _pController->Color(0,0,0,85), _pController->Color(0,0,0,57), _pController->Color(0,0,0,28)};

    /**
     * @brief GENERATE_STARS generates the new random positions for the frame and refreshes the timer
     *        DISPLAY_STAR displays the stars and polls whether the timers are ready and changes the stages according to the timers
     *        CAST_FALLING_STAR animates the cast of a falling star
     * 
     */
    enum StarLightStates
    {
        GENERATE_STARS,
        DISPLAY_STAR,
        CAST_FALLING_STAR,
    };

    /**
     * @brief Saves the effect states
     * 
     */
    StarLightStates stage = GENERATE_STARS;

    /**
     * @brief Specifies when the state machine will be refreshed
     * 
     */
    Timer cycle;


    /**
     * @brief Specifies when the star array will be regenerated
     * 
     */
    Timer generateNewStars;

    /**
     * @brief Specifies when another falling star will be casted
     * 
     */
    Timer nextFallingStar;


    /**
     * @brief Saves star positions
     * 
     */
    uint8_t starPositions[AMOUNT_OF_STARS];
    /**
     * @brief Is used to modify the LEDs
     * 
     */
    LedController *_pController;

    /**
     * @brief Is needed to handle transitions
     * 
     */
    TransitionHandler *_pTransition;

 

    /**
     * @brief Generates random positions and saves them inside
     *        starPositions
     * 
     */
    void generateStarFrame();

    /**
     * @brief The state machine that handels init and brightness change
     * 
     */
    void starLightStage();

    /**
     * @brief Goes to the specified brightness
     * 
     */
    void gotoBrightness();

    /**
     * @brief Generates a number between 0 and 4 and chooses a meteor type according what was generated
     *        and what type of led stripe is used.
     * 
     * @return uint32_t* - Returns the first address of the falling star array
     */
    uint32_t* chooseFallingStar();

    /**
     * @brief Generates a random number between 1 and 10 and returns a MoveDirection enum
     *        according to generated number. If the random can be devided by 2, it will cast from
     *        left to right. Is this not the case it will be casted from right to left
     *        It also sets the default value for the framePosition variable.
     * 
     * @return MoveDirection 
     */
    MoveDirection chooseFrameDirection();
public:
    StarLight(){}

    /**
     * @brief Shows a white color an the defines positions
     * 
     */
    void displayStarFrame(boolean radomIntensityActivated);

    /**
     * @brief Initializes the controller
     * 
     * @param controller 
     */
    void begin(LedController *controller)
    {
        _pController = controller;
    }

    void resetStateMachine();
    /**
     * @brief Executes the Statem machine after an cycle
     * 
     */
    void loop();
};

#endif //_STARLIGHT_
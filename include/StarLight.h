/**
 * @file StarLight.h
 * @author MacaroniDamage
 * @brief This effect should imitate a night sky
 * @version 0.2
 * @date 2020-12-23
 * 
 * 
 */
#ifndef _STARLIGHT_
#define _STARLIGHT_



#include <Arduino.h>
#include "Timer.h"
#include "LedController.h"
#include "TransitionHandler.h"
#include <avr/pgmspace.h>

/**
 * @brief Saves how many stars will be displayed
 * 
 */
#define AMOUNT_OF_STARS 20

/**
 * @brief Defines the directions
 *        with constances.
 * 
 */
enum MoveDirection{
        LEFT_TO_RIGHT,
        RIGHT_TO_LEFT,
};

    /**
     * @brief Displays a falling star that is white at the front und blue at the end.
     * 
     */
    const uint32_t blueFallingStar [8] PROGMEM= {16777215 , 3394815 , 26367 , 13260 , 153 , 0 , 0 , 0};
    const uint32_t blueFallingStarM [8] PROGMEM= {0,0,0, 153,13260, 26367 ,3394815 , 16777215};

    /**
     * @brief Displays a falling star that is yellow at the front at red at the end
     * 
     */
    const uint32_t orangeFallingStar [8] PROGMEM= {16776960 , 16771072 , 16753152 , 16747264 , 16741376 , 16735488 , 16711680 , 8388608};
    const uint32_t orangeFallingStarM [8] PROGMEM= {8388608 , 16711680 , 16735488 , 16741376 , 16747264 , 16753152 , 16771072 , 16776960};

    /**
     * @brief Displays a falling star with rainbow colors
     * 
     */
    const uint32_t rainbowFallingStar [8] PROGMEM= {16711680 , 16753920 , 16776960 , 32768 , 255 , 4915330 , 15631086 , 0};

    /**
     * @brief Displays a falling star with eight white nouances
     * 
     */
    const uint32_t whiteFallingStar [8] PROGMEM= {16777215 , 13027014 , 11184810 , 9342606 , 7434609 , 5592405 , 3750201 , 1842204};

    /**
     * @brief Displays a falling star with eight white nouances but for rgba stripes
     * 
     */
    //const uint32_t whiteFallingStarRGBW [8] PROGMEM= {4278190080 , 3321888768 , 2852126720 , 2382364672 , 1895825408 , 1426063360 , 956301312 , 469762048};

class StarLight
{
private:
    
    /**
     * @brief Defines when the stars will be regenerated
     * 
     */
    const uint32_t REGENERATE_STARS = 50000;

    /**
     * @brief Defines when a new falling star will be casted
     * 
     */
    const uint32_t CAST_NEXT_FALLING_STAR = 60000;


     
    /**
     * @brief Specifies in which direction the falling star will be casted
     *        This value will be generated randomly every time a falling star
     *        will be casted.
     * 
     */
    MoveDirection directionFrame = LEFT_TO_RIGHT;

    /**
     * @brief Saves the position of the falling star
     * 
     */
    int framePosition = 50;

    /**
     * @brief Contains the adress of the first cell that will be generated by
     *        the chooseFallingStar() method. The CAST_FALLING_STAR state uses this
     *        variable to display the choosen star.
     * 
     */
    const uint32_t* choosenType;



    /**
     * @brief GENERATE_STARS generates the new random positions for the frame and refreshes the timer
     *        DISPLAY_STAR displays the stars and polls whether the timers are ready and changes the stages according to the timers
     *        CAST_FALLING_STAR animates the cast of a falling star
     * 
     */
    enum StarLightStates
    {
        GENERATE_STARS,
        DISPLAY_STAR,
        CAST_FALLING_STAR,
    };

    /**
     * @brief Saves the effect states
     * 
     */
    StarLightStates stage = GENERATE_STARS;

    /**
     * @brief Specifies when the state machine will be refreshed
     * 
     */
    Timer cycle;


    /**
     * @brief Specifies when the star array will be regenerated
     * 
     */
    Timer generateNewStars;

    /**
     * @brief Specifies when another falling star will be casted
     * 
     */
    Timer nextFallingStar;


    /**
     * @brief Saves star positions
     * 
     */
    uint8_t starPositions[AMOUNT_OF_STARS];
    /**
     * @brief Is used to modify the LEDs
     * 
     */
    LedController *_pController;

    /**
     * @brief Is needed to handle transitions
     * 
     */
    TransitionHandler *_pTransition;

 

    /**
     * @brief Generates random positions and saves them inside
     *        starPositions
     * 
     */
    void generateStarFrame();

    /**
     * @brief The state machine that handels init and brightness change
     * 
     */
    void starLightStage();

    /**
     * @brief Goes to the specified brightness
     * 
     */
    void gotoBrightness();

    /**
     * @brief Generates a number between 0 and 4 and chooses a meteor type according what was generated
     *        and what type of led stripe is used.
     * 
     * @return const uint32_t* - Returns the first address of the falling star array
     */
    const uint32_t* chooseFallingStar();

    /**
     * @brief Generates a random number between 1 and 10 and returns a MoveDirection enum
     *        according to generated number. If the random can be devided by 2, it will cast from
     *        left to right. Is this not the case it will be casted from right to left
     *        It also sets the default value for the framePosition variable.
     * 
     * @return MoveDirection 
     */
    MoveDirection chooseFrameDirection();
public:
    StarLight(){}

    /**
     * @brief Shows a white color an the defines positions
     * 
     */
    void displayStarFrame(boolean radomIntensityActivated);

    /**
     * @brief Initializes the controller
     * 
     * @param controller 
     */
    void begin(LedController *controller)
    {
        _pController = controller;
    }

    void resetStateMachine();
    /**
     * @brief Executes the Statem machine after an cycle
     * 
     */
    void loop();
};

#endif //_STARLIGHT_